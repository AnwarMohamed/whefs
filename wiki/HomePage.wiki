#summary The main/home wiki page.
#labels Featured,Category-UserDocs
<wiki:toc max_depth='3'/>
<h1>whefs: the !WanderingHorse.net Embedded Filesystem Library for C</h1>

whefs is a Free/Open Source C library implementing an embedded virtual filesystem.
It works by creating a "filesystem" inside a so-called container file (or in memory), called an EFS. This API can then treat that container similarly to a filesystem. In essence this is similar to conventional archives (e.g. zip files), except that this library provides random-access read/write support to the filesystem via an API similar to the conventional fopen(), fread(), fwrite() and friends.

<b>Author</b>: Stephan Beal ([http://wanderinghorse.net/home/stephan/])

<b>License</b>: The code is released in the Public Domain except in jurisdictions which o not recognize Public Domain property, in which case it is released under the MIT license which is about as close as Public Domain as a license can get).

<h1>Features</h1>

   *  Provides features to create and open embedded/virtual filesystems, which is basically a filesystem which lives inside of a single file (or in memory), and to access "pseudofiles" within those filesystems.
   *  i'm a documentation maniac - whefs comes with over 150k of API documentation and another 100k+ of docs in this site's wiki.
   *  Optimized for low memory consumption: small use cases can get away with less than 2kb of malloc()'d memory, and "normal" cases need less than 10k (as measured by Valgrind).
   *  The i/o support is provided by [http://fossil.wanderinghorse.net/repos/whio/ libwhio], meaning it can in principal use a wide range of back-end storage devices. Implementations are provided for FILE handles, in-memory buffers, and mapping a user-supplied memory range as storage. It can also host an EFS which is statically compiled and linked into the application (see [Whefs2c]).
   *  The EFS [WhefsFilesystem file format] is independent of the device or platform bitness/endianness. 
   *  Provides two different approaches for "pseudofiles" inside an EFS. The lowest level implements a whio wrapper on top of the EFS, so that pseudofiles can act as full-fledged i/o devices. The higher-level API closely resembles the standard C file APIs (e.g. fopen(), fread()/read(), fwrite()/write(), etc.). The approaches are not mutually exclusive, and any given pseudofile can be accessed via either of the APIs.
   *  A side-effect of the i/o model is that it is possible to embed one EFS within another (to a near arbitrary depth). Being a side-effect, this support requires no special-case handling in the vfs kernel or i/o layer.
   *  The source tree comes with [WhefsTools several tools for working with EFSes], e.g. for creating VFSes, listing their contents, and copying files into and out of a VFS.
   *  Supports read-only as well as read-write operation, at the EFS and pseudofile levels.
   *  Has very liberal, non-viral licensing conditions, unhindered by licensing restrictions (or warranties, for that matter!). Googling has revealed little open-source work on embedded filesystems (but lots of commercial products), and i have been unable to find a comparable library released under non-restrictive (or non-viral) licensing terms.
   *  Designed to be easy to copy directly into a client source tree. See [WhefsAmalgamation the amalgamation page] for details.
   *  Fairly rigorous consistency and bounds checking - it bails out of it finds the slightest hint of foul play. (Just remember to check the error codes! They're there for a reason!)

<h1>Misfeatures</h1>

   *  Some parts of the public API need fleshing out.
   *  Still needs lots more testing before i'm comfortable calling it "ready for use."
   *  Very little support for concurrency - see [WhefsConcurrency] for details.
   *  Optimised for ease of use/maintenance and memory consumption, not speed. Typical use requires only a few KB of dynamically allocated memory (for the minimal caching it does). Despite the minimalism, however, it is surprisingly performant. Versions as of 20090613 will use significantly more memory for inode name caching, but if the EFS is kept within "reasonable bounds" the memory consumption stays small.
   *  Does not currently support directory hierarchies. See ticket `#[10857664fa]` for info on that.
   *  Doesn't abstract enough away to support standard filesystems (e.g. VFAT) inside the container file. It uses its own custom filesystem implementation (my very first attempt at such) which may be suitable for small use cases but will certainly not scale well (performance-wise) into the thousands of files range.
   *  A signal, crash, propagated C++ exception, or similar interruption while the FS is writing or holding unflushed file information can leave the pseudofile contents in an inconsistent state.
   *  Until the software stabilizes, the file format may change from version to version. It is however always possible to export the data from an old VFS (using an older version of whefs) and re-import it using a newer version.


<h1>Requirements and Platforms</h1>

See [RequirementsAndPlatforms].

<h1>Current status</h1>

"It works for me!"

Very Beta. It "seems to work", but the nature of the problem means there is lots of room for errors and bugs. Do not make the mistake of using it for data which you can't afford to lose.

That said, most of the basics are in place and working. There is plenty of cleaning up and refactoring to do, however.

<h1>Significant TODOs</h1>

See [ToDos] for the list of more pressing TODOs.

<h2>News</h2>

See [WhefsNews the news page].

<h1>Want to help?</h1>

whefs has some notable limitations and could be improved in some significant ways. Any feedback or assistance is always appreciated. You can reach me via [http://wanderinghorse.net/home/stephan/]. Anyone who shows an interest and submits a patch or two will gladly be given write access to the code repository.

Some areas of improvement which specifically come to mind (and in which i could definitely use a hand) are:

   *  Concurrency. See [WhefsConcurrency] for details.
   *  Caching/Performance. See [WhefsPerformance] for details.