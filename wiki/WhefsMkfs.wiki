#summary Tool for creating whefs containers.
#labels Category-ToolDocs
<h1>whefs-mkfs</h1>

whefs-mkfs is a tool similar to the conventional <tt>mkfs</tt> command. It creates VFS container files.

Usage: whefs-mkfs `[flags]` VFS_file

Aside from the [WhefsTools common command flags], whefs-mkfs supports these flags:

   *  -i### = set the number of inodes
   *  -b### = set the size of each block (in bytes)
   *  -c### = set the number of blocks (must be >= -i)
   *  -s### = set the maximum filename length
   *  -n = "dry run" mode - show what would be done, but don't do it.


To understand what these values mean it may be helpful to read [WhefsFilesystem] and/or [WhefsTweakingEFS].

All of these parameters have default values which may or may not be reasonable, so it is best to supply values for all parameters. The maximum values for the -i and -c values are determined by the compile-time constant <tt>WHEFS_ID_TYPE_BITS</tt>, which defaults to 16 bits (64k). The maximum value for -s is is the constant <tt>WHEFS_MAX_FILENAME_LENGTH</tt> (which defaults to 128 but a custom build of whefs may change that - see [WhefsTweakingEFS]). The maximum value for -b is theoretically (2^32-1), but in practice a value of 4k-32k is more realistic (and overflow/underflow may result when using extremely high values). Also, the library doesn't currently explicitly support "large files" (>2GB), so a block size that large doesn't make much sense.

<h2>Creating a VFS for a given set of files...</h2>

The source tree comes with a script called <tt>whefs-mkfs-for-files.sh</tt> which creates a new VFS for a set of files, sizing the VFS to fit (well, it gets close, anyway). It is used like this:

{{{
stephan@jareth:~/cvs/fossil/whefs$ ./whefs-mkfs-for-files.sh my.whefs whio*.c whio*.h
Using these whefs tools:  whefs-ls whefs-cp whefs-mkfs
File [my.whefs] already exists. If you want to overwrite it as a VFS tap ENTER, otherwise tap Ctrl-C now.

9 file(s) totaling 102018 bytes.

File sizes:
    smallest: 200
    average:  11336
    largest:  29715
Max filename length: 17

Using these parameters:
    inode count: 10
    block count: 55
    block size: 2048

Really continue creating (or overwriting) [my.whefs]?
Tap Ctrl-C to abort to ENTER to continue...

Creating VFS...
+ ./whefs-mkfs -s17 -i10 -b2048 -c55 my.whefs
VFS container file: my.whefs
	Block size: 2048
	Block count: 55
	inode count: 10
	Free data bytes: 112640
	Max filename length: 17
	Required container size (bytes): 114018
	Filesystem-to-data overhead: 1.21%
./whefs-mkfs: Done! Error code=0=[You win :)].
Importing files...
Import complete. Contents look like:
whefs.c:1473:whefs_fs_dump_info():
	sizeof(whefs_fs) = 120
	sizeof(whio_dev) = 12
	sizeof(whefs_inode) = 160
	on-disk sizeof whefs_inode = 43
	sizeof(whefs_file) = 16
	block size: 2048
	block count: 55
	max file/dir count: 10
	max filename length: 17
	magic cookie length: 23
	Container size:
		calculated =		114018
		device-reported =	114018
	Offsets:
		CORE_MAGIC	= 0
		SIZE	= 15
		CLIENT_MAGIC	= 20
		OPTIONS	= 48
		INODES	= 68
		BLOCKS	= 498
		EOF	= 114018
List of used inodes:
Node ID:        First block:    Size:       Timestamp:      Name:           
2               1               683         1231017161      whio.c
3               2               11634       1231017161      whio_dev.c
4               8               7441        1231017161      whio_dev_FILE.c
5               12              20834       1231017161      whio_dev_mem.c
6               23              9954        1231017161      whio_dev_subdev.c
7               28              4858        1231017161      whio_common.h
8               31              29715       1231017161      whio_dev.h
9               46              16626       1231017161      whio_devs.h
10              55              273         1231017161      whio.h
                         Total: 102018 bytes
9 of 10 inodes in use
Done processing VFS container file [my.whefs]:
-rw-r--r-- 1 stephan stephan 114018 2009-01-03 22:12 my.whefs
}}}

The script may need to be tweaked for certain data sets to avoid too much wasted space. For example, if packaging only very small files (under 2k) or only large files, you may want to change the default block size (4k). If someone can come up with a best-fit algorithm for the script i'd be more than happy to include it!