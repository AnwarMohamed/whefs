#summary Overview of whio_epfs
#labels Category-Internals,Phase-Design

= whio_epfs =

whio_epfs (hereafter called EPFS) is a component of the whio i/o library. libwhio provides the generic back-end storage API off of which whefs is built. (Indeed, whio was written because i wanted a generic storage API on top of which i could write whefs!) EPFS was written to take over the core-most component of whefs: the management of inodes and data blocks. i.e. the core filesystem itself. EPFS is basically whefs stripped of inode names support. Leaving out the naming support removed a surprising amount of complexity from the core code and gives higher-level client code more freedom/options in how they handle embedded filenames. (i was never 100% happy with any of the 3 or 4 solutions i tried in whefs, for reasons of performance or memory consumption.) A whio_dev-based hashtable was also written, and which will fit the inode-naming role perfectly. It can, in fact, itself be stored as a pseudofile within the EFS is serves. (whefs has historically reserved inode #1 for its own use, and the eventual embedding of filesystem metadata in the first pseudofile was in fact the reason for that. Now i've finally got something to store there!)

As of March 2010, EPFS is functional and feature-complete, and all of the components we need in order to rewrite whefs are in place. They simply have to be glued together now. whefs2, as it will be called, will be written on top of EPFS and other components which were written as part of the overall restructuring (e.g.. the whio_dev-based hashtable).

But... bringing whefs2 to life will be a large undertaking (a complete rewrite, but not half as much work as has gone into EPFS), and i do not expect to get around to it until possibly Q2 of 2010.

EPFS is described in more detail in the whio source repo:

  * [http://fossil.wanderinghorse.net/repos/whio/index.cgi/wiki/whio_epfs]

And the new storage-based hashtable is described here:

  * [http://fossil.wanderinghorse.net/repos/whio/index.cgi/wiki/whio_udb]